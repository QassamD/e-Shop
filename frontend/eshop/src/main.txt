import { StrictMode, useEffect } from "react";
import { createRoot } from "react-dom/client";
import AuthProvider from "react-auth-kit";
import createStore from "react-auth-kit/createStore";
import App from "./App";
import "bootstrap/dist/css/bootstrap.css";

interface AuthState {
  token: string;
  userId: string;
  isAdmin: boolean;
}

const store = createStore<AuthState>({
  authName: "_auth",
  authType: "localstorage",
  cookieDomain: window.location.hostname,
  cookieSecure: false,
});

export const getAccessToken = () => {
  try {
    const raw = localStorage.getItem("_auth");
    if (raw?.startsWith("eyJ")) return raw;
    const parsed = JSON.parse(raw || "{}");
    return parsed?.auth?.token || null;
  } catch (e) {
    console.error("Token retrieval error:", e);
    return null;
  }
};

// Load external scripts
const loadScript = (src: string) => {
  return new Promise((resolve, reject) => {
    const script = document.createElement("script");
    script.src = src;
    script.onload = resolve;
    script.onerror = reject;
    document.head.appendChild(script);
  });
};

const AppWrapper = () => {
  useEffect(() => {
    // Load Stripe and PayPal scripts
    Promise.all([
      loadScript("https://js.stripe.com/v3/"),
      loadScript(
        "https://www.paypal.com/sdk/js?client-id=AR8BBahg3yqK3MG7fEiFGnYCgQtizYGbrsFK86rrnW_6vTvK5qp7Owl-2eP1KmWB8cP5N7IVl5vyWKDT&currency=USD"
      ),
    ]).catch((error) => {
      console.error("Failed to load external scripts:", error);
    });
  }, []);

  return <App />;
};

const rootElement = document.getElementById("root");
if (!rootElement) throw new Error("Failed to find the root element");

const root = createRoot(rootElement);

root.render(
  <StrictMode>
    <AuthProvider store={store}>
      <AppWrapper />
    </AuthProvider>
  </StrictMode>
);
